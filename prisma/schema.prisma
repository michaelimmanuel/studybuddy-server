// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  enrollments   Enrollment[]
  submissions   Submission[]
  role          String?
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?

  @@unique([email])
  @@map("user")
}

model Course {
  id          String   @id
  title       String
  description String?
  enrollments Enrollment[]
  quizzes     Quiz[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  @@map("course")
}

model Enrollment {
  id        String   @id
  userId    String
  courseId  String
  status    EnrollmentStatus @default(PENDING)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, courseId])
  @@map("enrollment")
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Quiz {
  id        String    @id @default(uuid())
  courseId   String
  title     String
  timeLimit Int
  createdAt DateTime  @default(now())

  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions  Question[]
  submissions Submission[]

  @@map("quiz")
}

model Question {
  id      String   @id @default(uuid())
  quizId  String
  text    String

  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers  Answer[]
  submissionAnswers SubmissionAnswer[]

  @@map("question")
}

model Answer {
  id         String   @id @default(uuid())
  questionId String
  text       String
  isCorrect  Boolean  @default(false)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  submissionAnswers SubmissionAnswer[] @relation("AnswerToSubmissionAnswer")

  @@map("answer")
}

model Submission {
  id          String   @id @default(uuid())
  userId      String
  quizId      String
  score       Int
  submittedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz  Quiz  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers SubmissionAnswer[]

  @@unique([userId, quizId])
  @@map("submission")
}

model SubmissionAnswer {
  id           String   @id @default(uuid())
  submissionId String
  questionId   String
  answerId     String

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     Answer     @relation(fields: [answerId], references: [id], onDelete: Cascade, name: "AnswerToSubmissionAnswer")

  @@map("submission_answer")
}


