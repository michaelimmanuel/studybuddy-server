// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  role          String?
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?
  packagePurchases PackagePurchase[]
  bundlePurchases  BundlePurchase[]
  quizAttempts     QuizAttempt[]

  @@unique([email])
  @@map("user")
}

model Course {
  id          String   @id
  title       String
  description String?
  questions   Question[]  // Changed: Direct relationship to questions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  @@map("course")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Question {
  id                 String   @id @default(uuid())
  courseId           String   // Changed: Direct relationship to course
  text               String
  explanation        String?  // Single explanation for the entire question
  imageUrl           String?  // Optional image URL for the question
  explanationImageUrl String? // Optional image URL for the explanation
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  answers Answer[]
  packageQuestions PackageQuestion[]
  quizAnswers      QuizAnswer[]

  @@map("question")
}

model Answer {
  id         String   @id @default(uuid())
  questionId String
  text       String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizAnswers QuizAnswer[]

  @@map("answer")
}
model Package {
  id              String   @id @default(uuid())
  title           String
  description     String?
  price           Float    // Price in dollars
  isActive        Boolean  @default(true)
  timeLimit       Int?     // Time limit in minutes (null = no time limit)
  availableFrom   DateTime? // When package becomes available
  availableUntil  DateTime? // When package expires/becomes unavailable
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  createdBy       String   // Admin user ID who created the package
  
  // Relations
  packageQuestions PackageQuestion[]
  bundlePackages   BundlePackage[]
  purchases        PackagePurchase[]
  quizAttempts     QuizAttempt[]
  
  @@map("package")
}

model PackageQuestion {
  id         String   @id @default(uuid())
  packageId  String
  questionId String
  order      Int?     // Optional order for questions in the package
  createdAt  DateTime @default(now())
  
  // Relations
  package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // Ensure a question can only be added once per package
  @@unique([packageId, questionId])
  @@map("package_question")
}

model Bundle {
  id              String   @id @default(uuid())
  title           String
  description     String?
  price           Float    // Bundle price (can be different from sum of package prices)
  discount        Float?   // Optional discount percentage
  isActive        Boolean  @default(true)
  availableFrom   DateTime? // When bundle becomes available
  availableUntil  DateTime? // When bundle expires/becomes unavailable
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  createdBy       String   // Admin user ID who created the bundle
  
  // Relations
  bundlePackages BundlePackage[]
  purchases      BundlePurchase[]
  
  @@map("bundle")
}

model BundlePackage {
  id        String   @id @default(uuid())
  bundleId  String
  packageId String
  order     Int?     // Optional order for packages in the bundle
  createdAt DateTime @default(now())
  
  // Relations
  bundle   Bundle  @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  package  Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
  // Ensure a package can only be added once per bundle
  @@unique([bundleId, packageId])
  @@map("bundle_package")
}

/// Purchases of individual packages by users
model PackagePurchase {
  id          String   @id @default(uuid())
  userId      String
  packageId   String
  pricePaid   Float
  purchasedAt DateTime @default(now())
  expiresAt   DateTime? // Optional expiration (null = lifetime)
  approved    Boolean  @default(true) // Admin approval status

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([userId, packageId])
  @@index([userId])
  @@index([packageId])
  @@map("package_purchase")
}

/// Purchases of bundles (grants access to all included packages)
model BundlePurchase {
  id          String   @id @default(uuid())
  userId      String
  bundleId    String
  pricePaid   Float
  purchasedAt DateTime @default(now())
  expiresAt   DateTime? // Optional expiration
  approved    Boolean  @default(true) // Admin approval status

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@unique([userId, bundleId])
  @@index([userId])
  @@index([bundleId])
  @@map("bundle_purchase")
}

/// Quiz attempts by users
model QuizAttempt {
  id              String   @id @default(uuid())
  userId          String
  packageId       String
  score           Float    // Percentage score (0-100)
  correctAnswers  Int      // Number of correct answers
  totalQuestions  Int      // Total number of questions
  timeSpent       Int      // Time spent in seconds
  startedAt       DateTime // When the quiz was started
  completedAt     DateTime @default(now()) // When the quiz was completed
  createdAt       DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]

  @@index([userId])
  @@index([packageId])
  @@index([userId, packageId])
  @@map("quiz_attempt")
}

/// Individual answers for each quiz attempt
model QuizAnswer {
  id               String   @id @default(uuid())
  attemptId        String
  questionId       String
  selectedAnswerId String?  // Null if unanswered
  isCorrect        Boolean  @default(false)
  createdAt        DateTime @default(now())

  attempt        QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question       Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedAnswer Answer?     @relation(fields: [selectedAnswerId], references: [id], onDelete: SetNull)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@map("quiz_answer")
}



